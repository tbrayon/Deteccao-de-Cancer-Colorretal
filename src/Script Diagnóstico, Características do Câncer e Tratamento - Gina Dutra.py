# -*- coding: utf-8 -*-
"""Projeto Câncer Colorretal

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KsdB73EGE2Idcq7SUREpyqocS8nYjoU9

**1) Análise Inicial: Estrutura dos Dados**
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import textwrap
from scipy.stats import chi2_contingency
import numpy as np
from scipy.stats import spearmanr
import statsmodels.api as sm
#from google.colab import drive

# Conectar o Google Drive ao ambiente do Colab.
#drive.mount('/content/drive')

# Defina o caminho correto para o arquivo no Google Colab
file_path = "c:/Users/gina_/OneDrive/Área de Trabalho/PUC/AULAS 7 SEMESTRE/Projeto/colorectal_cancer_prediction.xlsx"

# Carregar o dataset diretamente usando pandas
df = pd.read_excel(file_path, dtype=str)

# Dimensões do DataFrame (quantidade de linhas e colunas).
print(df.shape)

# Lista todas as colunas do dataframe
# Imprime o índice das colunas
print(df.columns)
# Remove espaços em branco (tanto à esquerda quanto à direita) dos nomes das colunas
df.columns = df.columns.str.strip()
# Converte o índice das colunas do DataFrame df em uma lista Python e a imprime
print(df.columns.tolist())
# Imprime o índice das linhas
print(df.index)
# Reseta o índice do DataFrame df para o padrão (uma sequência de números inteiros começando em 0) e remove o índice antigo
df = df.reset_index(drop=True)
# Mostra o tipo de informação que cada coluna contém (números, texto, etc.).
print(df.dtypes)

# Exibir as primeiras 5 linhas com todas as colunas
print("First 5 records with all 30 columns:")
print(df.head())

# Verificar as informações do dataset (tipos de dados, valores nulos, etc.)
print(df.info())

# Verificar quantas linhas estão completamente vazias. (Não há nenhuma linha vazia)
print(df[df.isnull().all(axis=1)])

# Exibir todas as linhas onde todos os valores são NaN. (Todas as linhas do DataFrame possuem pelo menos um valor preenchido)
print((df.isnull().any(axis=1)).sum())

# Print de verificação de valores ausentes. (Não há valor ausente)
print(df.isnull().sum())

"""**2) Transformando os dados categóricos em numéricos na categoria "Diagnóstico, Características do Câncer e Tratamento" e nas colunas Age e Time_to_Recurrence:**"""

# Coluna Stage_at_Diagnosi:
# Descrição: Estágio do câncer no momento do diagnóstico.
stage_mapping = {"I": 1, "II": 2, "III": 3, "IV": 4}
df["Stage_at_Diagnosis"] = df["Stage_at_Diagnosis"].map(stage_mapping)
df.replace({"Stage_at_Diagnosis": stage_mapping}, inplace=True)
print(df["Stage_at_Diagnosis"].head)

# Coluna Tumor_Aggressiveness:
# Descrição: Nível de agressividade do tumor.
tumor_mapping = {"Low": 1, "Medium": 2, "High": 3}
df["Tumor_Aggressiveness"] = df["Tumor_Aggressiveness"].map(tumor_mapping)
df.replace({"Tumor_Aggressiveness": stage_mapping}, inplace=True)
print(df["Tumor_Aggressiveness"].head)

# Coluna Insurance_Coverage
# Descrição: Paciente possui plano de saúde.
insurance_mapping = {"Yes": 1, "No": 0}
df["Insurance_Coverage"] = df["Insurance_Coverage"].map(insurance_mapping)
df.replace({"Insurance_Coverage": insurance_mapping}, inplace=True)
print(df["Insurance_Coverage"].head)

# Coluna Time_to_Diagnosis
# Descrição: Tempo decorrido entre os primeiros sintomas e o diagnóstico.
time_to_diagnosis_mapping = {"Delayed": 2, "Timely": 1}
df["Time_to_Diagnosis"] = df["Time_to_Diagnosis"].map(time_to_diagnosis_mapping)
df.replace({"Time_to_Diagnosis": time_to_diagnosis_mapping}, inplace=True)
print(df["Time_to_Diagnosis"].head)

# Coluna Treatment_Access
# Descrição: Nível de acesso ao tratamento.
treatment_access_mapping = {"Good": 1, "Limited": 2}
df["Treatment_Access"] = df["Treatment_Access"].map(treatment_access_mapping)
df.replace({"Treatment_Access": treatment_access_mapping}, inplace=True)
print(df["Treatment_Access"].head)

# Coluna Chemotherapy_Received
# Descrição: O paciente realizou quimioterapia?
chemotherapy_mapping = {"Yes": 1, "No": 0}
df["Chemotherapy_Received"] = df["Chemotherapy_Received"].map(chemotherapy_mapping)
df.replace({"Chemotherapy_Received": chemotherapy_mapping}, inplace=True)
print(df["Chemotherapy_Received"].head)

# Coluna Radiotherapy_Received
# Descrição: O paciente realizou radioterapia?
radiotherapy_mapping = {"Yes": 1, "No": 0}
df["Radiotherapy_Received"] = df["Radiotherapy_Received"].map(radiotherapy_mapping)
df.replace({"Radiotherapy_Received": radiotherapy_mapping}, inplace=True)
print(df["Radiotherapy_Received"].head)

# Coluna Age (Idade)
# Descrição: Idade do paciente em anos.
df["Age"] = pd.to_numeric(df["Age"], errors="coerce")
# Ver se tem algum NaN
print(df["Age"].isnull().sum())
print(df[df["Age"].isnull()])
print(df["Age"].head)

# Coluna Time_to_Recurrence (Tempo até a Recorrência)
# Descrição: Tempo decorrido até a recorrência do câncer (em meses).
df["Time_to_Recurrence"] = pd.to_numeric(df["Time_to_Recurrence"], errors="coerce")
# Ver se tem algum NaN
print(df["BMI"].isnull().sum())
print(df["Time_to_Recurrence"].head)

# Coluna Colonoscopy_Access (Acesso à Colonoscopia)
# Descrição: Paciente teve acesso à colonoscopia para rastreamento?
colonoscopy_mapping = {"Yes": 1, "No": 0}
df["Colonoscopy_Access"] = df["Colonoscopy_Access"].map(colonoscopy_mapping)
df.replace({"Colonoscopy_Access": colonoscopy_mapping}, inplace=True)
print(df["Colonoscopy_Access"].head())

# Verificando se as colunas acima foram transformadas em numéricos.
print(df.info())

# Printando as colunas para ver se está tudo certo no dataset.
print(df.head())

"""**3) Analisando cada coluna separadamente na categoria "Diagnóstico, Características do Câncer e Tratamento":**


"""

# Gráfico de barras para a distribuição dos estágios do diagnóstico

# Contagem dos valores
counts = df["Stage_at_Diagnosis"].value_counts()
# Criar o gráfico de barras
ax = counts.plot(kind="bar", title="Distribuição de Estágios no Diagnóstico", color='royalblue')
# Adicionar rótulos acima das barras
for i, v in enumerate(counts):
    ax.text(i, v + 1, str(v), ha='center', fontsize=10)
plt.xlabel("Estágio")
plt.ylabel("Frequência")
plt.xticks(ticks=[0, 1, 2, 3], labels=["II", "I", "III", "IV"], rotation=0)

# Descrição (em caixa e alinhada à esquerda)
plt.figtext(0.01, -0.25, "Descrição: Estágio do câncer no momento do diagnóstico.", ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

# Valores possíveis (alinhados e em caixa, com espaço entre as caixas)
valores_possiveis = (
    "Valores Possíveis:\n"
    "I: Tumor localizado, sem disseminação\n"
    "II: Tumor invadiu tecidos próximos\n"
    "III: Tumor com envolvimento significativo dos linfonodos\n"
    "IV: Câncer metastático (espalhado para órgãos distantes)"
)

plt.figtext(0.01, -0.5, valores_possiveis, ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

plt.tight_layout(rect=[0, 0.03, 1, 0.75]) # Ajusta o layout para evitar sobreposição


plt.show()

# Inserindo um espaço
print("\n")

# Texto explicativo
texto6 = (
    "O gráfico de barras exibe a distribuição dos estágios do diagnóstico de câncer, mostrando a frequência de pacientes em cada estágio. "
    "Observa-se que o estágio II é o mais frequente, seguido pelos estágios I e III, que apresentam frequências semelhantes. "
    "O estágio IV, que representa o câncer metastático, é o menos frequente. "
    "Essa distribuição pode refletir a prevalência de diferentes estágios de câncer na população estudada ou as características do diagnóstico e encaminhamento dos pacientes. "
    "A análise da distribuição dos estágios do diagnóstico pode auxiliar na compreensão da progressão da doença e no planejamento de estratégias de tratamento e acompanhamento."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto6, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

plt.show()

# Gráfico de barras para a agressividade do tumor

# Contagem dos valores
counts = df["Tumor_Aggressiveness"].value_counts()
# Criar o gráfico de barras
ax = counts.plot(kind="bar", title="Distribuição da Agressividade do Tumor", color='firebrick')
# Adicionar rótulos acima das barras
for i, v in enumerate(counts):
    ax.text(i, v + 1, str(v), ha='center', fontsize=10)
plt.xlabel("Agressividade")
plt.ylabel("Frequência")
plt.xticks(ticks=[0, 1, 2], labels=["Medium", "Low", "High"], rotation=0)

# Descrição (em caixa e alinhada à esquerda)
plt.figtext(0.01, -0.25, "Descrição: Nível de agressividade do tumor.", ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

# Valores possíveis (alinhados e em caixa)
valores_possiveis = (
    "Valores Possíveis:\n"
    "Low: Baixa\n"
    "Medium: Média\n"
    "High: Alta"
)

plt.figtext(0.01, -0.5, valores_possiveis, ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

plt.tight_layout(rect=[0, 0.03, 1, 0.75]) # Ajusta o layout para evitar sobreposição


plt.show()

# Inserindo um espaço
print("\n")

# Texto explicativo
texto7 = (
    "O gráfico de barras exibe a distribuição da agressividade do tumor, mostrando a frequência de pacientes em cada nível de agressividade. "
    "Observa-se que a agressividade média e baixa são as mais frequentes, com frequências semelhantes, enquanto a agressividade alta é a menos frequente. "
    "Essa distribuição pode refletir as características dos tumores na população estudada ou os critérios de classificação da agressividade tumoral. "
    "A análise da distribuição da agressividade tumoral pode auxiliar na compreensão do comportamento dos tumores e no planejamento de estratégias de tratamento e acompanhamento."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto7, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

plt.show()

# Gráfico de barras para plano de saúde

# Contagem dos valores
counts = df["Insurance_Coverage"].value_counts()
# Criar o gráfico de barras
ax = counts.plot(kind="bar", title="Cobertura de Plano de Saúde", color='purple')
# Adicionar rótulos acima das barras
for i, v in enumerate(counts):
    ax.text(i, v + 1, str(v), ha='center', fontsize=10)
plt.xlabel("Possui Plano?")
plt.ylabel("Frequência")
plt.xticks(ticks=[0, 1], labels=["Sim", "Não"], rotation=0)

# Descrição (em caixa e alinhada à esquerda)
plt.figtext(0.01, -0.25, "Descrição: Paciente possui plano de saúde?", ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

# Valores possíveis (alinhados e em caixa)
valores_possiveis = (
    "Valores Possíveis:\n"
    "Sim: Paciente possui plano de saúde\n"
    "Não: Paciente não possui plano de saúde"
)

plt.figtext(0.01, -0.5, valores_possiveis, ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

plt.tight_layout(rect=[0, 0.03, 1, 0.75]) # Ajusta o layout para evitar sobreposição


plt.show()

# Inserindo um espaço
print("\n")

# Texto explicativo
texto8 = (
    "O gráfico de barras exibe a distribuição da cobertura de plano de saúde entre os pacientes. "
    "Observa-se que a maioria dos pacientes possui plano de saúde, com uma frequência significativamente maior em comparação com aqueles que não possuem. "
    "Essa distribuição pode refletir a prevalência de planos de saúde na população estudada ou os critérios de inclusão dos pacientes na análise. "
    "A análise da cobertura de plano de saúde pode auxiliar na compreensão do acesso aos serviços de saúde e no planejamento de estratégias de tratamento e acompanhamento."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto8, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

plt.show()

# Gráfico de barras para tempo até o diagnóstico

# Contagem dos valores
counts = df["Time_to_Diagnosis"].value_counts()
# Criar o gráfico de barras
ax = counts.plot(kind="bar", title="Tempo até o Diagnóstico", color='seagreen')
# Adicionar rótulos acima das barras
for i, v in enumerate(counts):
    ax.text(i, v + 1, str(v), ha='center', fontsize=10)
plt.xlabel("Tempo")
plt.ylabel("Frequência")
plt.xticks(ticks=[0, 1], labels=["Timely", "Delayed"], rotation=0)

# Descrição (em caixa e alinhada à esquerda)
plt.figtext(0.01, -0.25, "Descrição: Tempo decorrido entre os primeiros sintomas e o diagnóstico.", ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

# Valores possíveis (alinhados e em caixa)
valores_possiveis = (
    "Valores Possíveis:\n"
    "Delayed: Tardio\n"
    "Timely: Precoce"
)

plt.figtext(0.01, -0.5, valores_possiveis, ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

plt.tight_layout(rect=[0, 0.03, 1, 0.75]) # Ajusta o layout para evitar sobreposição

plt.show()

# Inserindo um espaço
print("\n")

# Texto explicativo
texto9 = (
    "O gráfico de barras exibe a distribuição do tempo até o diagnóstico, mostrando a frequência de pacientes que receberam o diagnóstico de forma precoce ou tardia. "
    "Observa-se que a maioria dos pacientes recebeu o diagnóstico de forma precoce (Timely), com uma frequência significativamente maior em comparação com aqueles que receberam o diagnóstico de forma tardia (Delayed). "
    "Essa distribuição pode refletir a eficácia dos sistemas de saúde na detecção precoce de doenças ou os critérios de classificação do tempo de diagnóstico. "
    "A análise do tempo até o diagnóstico pode auxiliar na compreensão dos fatores que influenciam o diagnóstico precoce ou tardio e no planejamento de estratégias de intervenção."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto9, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

plt.show()

# Gráfico de barras para acesso ao tratamento

# Contagem dos valores
counts = df["Treatment_Access"].value_counts()
# Criar o gráfico de barras
ax = counts.plot(kind="bar", title="Acesso ao Tratamento", color='darkorange')
# Adicionar rótulos acima das barras
for i, v in enumerate(counts):
    ax.text(i, v + 1, str(v), ha='center', fontsize=10)
plt.xlabel("Acesso")
plt.ylabel("Frequência")
plt.xticks(ticks=[0, 1], labels=["Good", "Limited"], rotation=0)

# Descrição (em caixa e alinhada à esquerda)
plt.figtext(0.01, -0.25, "Descrição: Nível de acesso ao tratamento.", ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

# Valores possíveis (alinhados e em caixa)
valores_possiveis = (
    "Valores Possíveis:\n"
    "Good: Adequado\n"
    "Limited: Limitado"
)

plt.figtext(0.01, -0.5, valores_possiveis, ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

plt.tight_layout(rect=[0, 0.03, 1, 0.75]) # Ajusta o layout para evitar sobreposição

plt.show()

# Inserindo um espaço
print("\n")

# Texto explicativo
texto10 = (
    "O gráfico de barras exibe a distribuição do nível de acesso ao tratamento entre os pacientes. "
    "Observa-se que a maioria dos pacientes possui acesso adequado ao tratamento (Good), com uma frequência significativamente maior em comparação com aqueles que possuem acesso limitado (Limited). "
    "Essa distribuição pode refletir a qualidade dos serviços de saúde disponíveis ou os critérios de classificação do acesso ao tratamento. "
    "A análise do nível de acesso ao tratamento pode auxiliar na compreensão das disparidades no acesso aos serviços de saúde e no planejamento de estratégias de intervenção."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto10, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

plt.show()

# Gráfico de barras para quimioterapia recebida

# Contagem dos valores
counts = df["Chemotherapy_Received"].value_counts()
# Criar o gráfico de barras
ax = counts.plot(kind="bar", title="Pacientes que Receberam Quimioterapia", color='dodgerblue')
# Adicionar rótulos acima das barras
for i, v in enumerate(counts):
    ax.text(i, v + 1, str(v), ha='center', fontsize=10)
plt.xlabel("Quimioterapia")
plt.ylabel("Frequência")
plt.xticks(ticks=[0, 1], labels=["Sim", "Não"], rotation=0)

# Descrição (em caixa e alinhada à esquerda)
plt.figtext(0.01, -0.25, "Descrição: O paciente realizou quimioterapia?", ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

# Valores possíveis (alinhados e em caixa)
valores_possiveis = (
    "Valores Possíveis:\n"
    "Sim: Paciente realizou quimioterapia\n"
    "Não: Paciente não realizou quimioterapia"
)

plt.figtext(0.01, -0.5, valores_possiveis, ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

plt.tight_layout(rect=[0, 0.03, 1, 0.75]) # Ajusta o layout para evitar sobreposição

plt.show()

# Inserindo um espaço
print("\n")

# Texto explicativo
texto11 = (
    "O gráfico de barras exibe a distribuição de pacientes que receberam quimioterapia. "
    "Observa-se que o número de pacientes que receberam quimioterapia (Sim) é ligeiramente superior ao número de pacientes que não receberam (Não). "
    "Essa distribuição pode refletir as características da população estudada ou os protocolos de tratamento adotados. "
    "A análise da frequência de pacientes que receberam quimioterapia pode auxiliar na compreensão da utilização desse tipo de tratamento e no planejamento de estratégias de intervenção."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto11, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

plt.show()

# Gráfico de barras para radioterapia recebida

# Contagem dos valores
counts = df["Radiotherapy_Received"].value_counts()
# Criar o gráfico de barras
ax = counts.plot(kind="bar", title="Pacientes que Receberam Radioterapia", color='darkred')
# Adicionar rótulos acima das barras
for i, v in enumerate(counts):
    ax.text(i, v + 1, str(v), ha='center', fontsize=10)
plt.xlabel("Radioterapia")
plt.ylabel("Frequência")
plt.xticks(ticks=[0, 1], labels=["Não", "Sim"], rotation=0)

# Descrição (em caixa e alinhada à esquerda)
plt.figtext(0.01, -0.25, "Descrição: O paciente realizou radioterapia?", ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

# Valores possíveis (alinhados e em caixa)
valores_possiveis = (
    "Valores Possíveis:\n"
    "Não: Paciente não realizou radioterapia\n"
    "Sim: Paciente realizou radioterapia"
)

plt.figtext(0.01, -0.5, valores_possiveis, ha="left", fontsize=10, bbox={"facecolor":"lightgray", "alpha":0.5, "pad":5})

plt.tight_layout(rect=[0, 0.03, 1, 0.75]) # Ajusta o layout para evitar sobreposição

plt.show()

# Inserindo um espaço
print("\n")

# Texto explicativo
texto12 = (
    "O gráfico de barras exibe a distribuição de pacientes que receberam radioterapia. "
    "Observa-se que a maioria dos pacientes não recebeu radioterapia (Não), com uma frequência significativamente maior em comparação com aqueles que receberam (Sim). "
    "Essa distribuição pode refletir as características da população estudada ou os protocolos de tratamento adotados. "
    "A análise da frequência de pacientes que receberam radioterapia pode auxiliar na compreensão da utilização desse tipo de tratamento e no planejamento de estratégias de intervenção."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto12, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

plt.show()

"""**4) Realizando análises estatísticas entre a categoria "Diagnóstico, Características do Câncer e Tratamento" e demais variáveis numéricas do Dataset (Age e Time To Recurrence):**"""

# Medidas de Tendência Central e Dispersão
print("\nMedidas de Tendência Central e Dispersãos:")
estatisticas = df.describe().loc[['mean', '50%', 'std']]  # 50% representa a mediana

# Formatação do output para melhor legibilidade
print("\nMédias e Medidas de Dispersão das Variáveis Numéricas:\n")
print(estatisticas.to_string())

# Texto explicativo
texto13 = (
    "A análise das medidas de tendência central e dispersão revela insights importantes sobre as variáveis numéricas do conjunto de dados. A idade média dos pacientes é de aproximadamente"
    "54 anos, com uma mediana similar, indicando uma distribuição relativamente simétrica. O estágio médio do diagnóstico é 1.4, sugerindo que a maioria dos pacientes foi diagnosticada em "
    "estágios iniciais. A agressividade tumoral média é 0.8, com uma mediana de 1, indicando uma tendência para tumores de baixa agressividade. A maioria dos pacientes possui cobertura de "
    "seguro de saúde, teve diagnóstico rápido e acesso ao tratamento. A proporção de pacientes que receberam quimioterapia e radioterapia é aproximadamente igual."
    " O tempo médio para recorrência é de cerca de 29.5 meses, com uma mediana de 30 meses, sugerindo uma distribuição relativamente simétrica. O desvio padrão para idade e tempo de recorrência"
    " indicam uma variação considerável entre os pacientes, enquanto as outras variáveis mostram menor variação. É importante notar que algumas variáveis, como 'Insurance_Coverage', "
    "'Time_to_Diagnosis', 'Treatment_Access', 'Chemotherapy_Received' e 'Radiotherapy_Received' parecem ser binárias ou ter uma escala limitada, o que explica a baixa variabilidade"
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto13, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

# Resumo estatístico de algumas colunas numéricas
resumo_estatistico = df.describe()

# Formatação do resumo estatístico para melhor legibilidade
resumo_formatado = resumo_estatistico.to_string()

# Impressão do resumo estatístico formatado
print(resumo_formatado)

# Texto explicativo
texto15 = (
    "O resumo estatístico acima apresenta as principais medidas descritivas das variáveis numéricas do conjunto de dados. A contagem (count) indica o número de observações válidas em cada"
    "coluna. A média (mean) representa o valor médio de cada variável. O desvio padrão (std) mede a dispersão dos dados em relação à média. O valor mínimo (min) e o valor máximo (max) "
    "indicam os limites da variação de cada variável. Os quartis (25%, 50%, 75%) dividem os dados em quatro partes iguais, permitindo analisar a distribuição dos dados. Observa-se que a"
    "variável 'Idade' (Age) apresenta uma média de 54.33 anos, com uma variação considerável (desvio padrão de 20.18 anos). A variável 'Tempo até a Recorrência' (Time_to_Recurrence) "
    "apresenta uma média de 29.54 meses, com uma variação de até 59 meses. As demais variáveis, como 'Estágio do Diagnóstico' (Stage_at_Diagnosis), "
    "'Agressividade do Tumor' (Tumor_Aggressiveness), 'Cobertura do Plano de Saúde' (Insurance_Coverage), 'Tempo até o Diagnóstico' (Time_to_Diagnosis), "
    "'Acesso ao Tratamento' (Treatment_Access), 'Recebimento de Quimioterapia' (Chemotherapy_Received) e 'Recebimento de Radioterapia' (Radiotherapy_Received),"
    " são variáveis categóricas binárias (0 ou 1), com médias próximas de 0.5, indicando uma distribuição equilibrada entre as categorias. A análise do resumo estatístico pode auxiliar "
    "na compreensão da distribuição e variação das variáveis numéricas, fornecendo informações importantes para a análise exploratória dos dados e o desenvolvimento de modelos preditivos"
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto15, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

# Medidas de Tendência Central (Média, Mediana, Moda)

# Média, mediana e moda de variáveis numéricas
media = df.mean(numeric_only=True)
mediana = df.median(numeric_only=True)
moda = df.mode().iloc[0]

# Formatação das medidas de tendência central para melhor legibilidade
print("Média:\n", media.to_string())
print("\nMediana:\n", mediana.to_string())
print("\nModa:\n", moda.to_string())

# Texto explicativo
texto16 = (
    "A análise estatística apresentada oferece uma visão abrangente das características do conjunto de dados, abrangendo medidas de tendência central (média, mediana e moda) e "
    "dispersão (desvio padrão). A idade média dos pacientes é de 54 anos, com uma distribuição simétrica, enquanto o tempo médio para recorrência é de aproximadamente 29.5 meses. "
    "A maioria dos pacientes foi diagnosticada no estágio 2 do câncer, com tumores de agressividade média. A cobertura de seguro, o diagnóstico precoce e o acesso ao tratamento são comuns "
    "na amostra. A quimioterapia é mais frequente que a radioterapia. A moda revela que a maioria dos pacientes é do sexo masculino, raça branca, da América do Norte, residente em áreas "
    "urbanas, de classe média, sem histórico familiar ou prévio de câncer, com diagnóstico regular, dieta ocidental, baixo nível de atividade física, nunca fumou, baixo consumo de álcool e "
    "carne vermelha, consumo médio de fibras, cobertura de seguro, diagnóstico precoce, acesso ao tratamento, quimioterapia, cirurgia, boa adesão ao acompanhamento, sobrevida e sem recorrência."
    " O tempo mais frequente para recorrência é de 53 meses."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto16, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

# 4) Medidas de Dispersão (Desvio Padrão e Intervalo Interquartil - IQR)

# Desvio padrão
desvio_padrao = df.std(numeric_only=True)

# Intervalo interquartil (IQR)
Q1 = df.quantile(0.25, numeric_only=True)
Q3 = df.quantile(0.75, numeric_only=True)
IQR = Q3 - Q1

# Formatação das medidas de dispersão para melhor legibilidade
print("Desvio Padrão:\n", desvio_padrao.to_string())
print("\nIntervalo Interquartil (IQR):\n", IQR.to_string())

# Texto explicativo
texto17 = (
    "As medidas de dispersão fornecem informações sobre a variabilidade dos dados em relação à média ou à mediana. O desvio padrão mede a dispersão dos dados em torno da média, enquanto"
    " o intervalo interquartil (IQR) mede a dispersão dos dados em torno da mediana. Neste caso, observa-se que a variável 'Idade' (Age) apresenta o maior desvio padrão (20.18 anos) e o maior "
    "IQR (35 anos), indicando uma alta variabilidade na idade dos pacientes. A variável 'Tempo até a Recorrência' (Time_to_Recurrence) também apresenta um desvio padrão "
    "considerável (17.27 meses) e um IQR de 29 meses, sugerindo uma ampla variação no tempo até a recorrência do câncer. As demais variáveis, que são categóricas binárias (0 ou 1), "
    "apresentam desvios padrão próximos de 0.5 e IQRs de 1 ou 0, indicando uma baixa variabilidade e uma distribuição equilibrada entre as categorias. A análise das medidas de dispersão "
    "pode auxiliar na identificação de variáveis com alta variabilidade, o que pode ter implicações para a análise dos dados e o desenvolvimento de modelos preditivos."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto17, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

# Moda das variáveis da categoria Diagnóstico, Características do Câncer e Tratamento.
mode_values = df[["Stage_at_Diagnosis", "Tumor_Aggressiveness", "Insurance_Coverage",
                  "Time_to_Diagnosis", "Treatment_Access", "Chemotherapy_Received", "Radiotherapy_Received"]].mode().T

# Definindo nomes mais amigáveis para as colunas
mode_values.columns = ["Modo (valor mais frequente)"]

# Exibindo de maneira mais legível
print(mode_values)

# Inserindo um espaço
print("\n")

# Texto a ser exibido
texto1 = (
    "O resultado da análise da moda das variáveis relacionadas ao diagnóstico, características do câncer e tratamento revela os valores mais frequentes encontrados no conjunto de dados. "
    "A maioria dos pacientes foi diagnosticada no estágio 2 do câncer, com tumores de agressividade média (valor 2). A maioria possui cobertura de seguro de saúde (valor 1), teve diagnóstico"
    " em um curto intervalo de tempo (valor 1) e acesso ao tratamento (valor 1). Além disso, a maioria dos pacientes recebeu quimioterapia (valor 1), enquanto a maioria não recebeu "
    "radioterapia (valor 0). Esses resultados refletem os padrões mais comuns entre os pacientes e podem auxiliar na definição de estratégias de tratamento e acompanhamento"
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto1, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

"""**5) Respondendo as questões de pesquisa relacionada à categoria Diagnóstico, Características do Câncer e Tratamento utilizando métodos de estatística:**"""

# Pergunta: Considerando os atributos relacionados às informações demográficas e ao diagnóstico e tratamento, qual o tratamento é mais recomendável?
# Não respondeu a questão de pesquisa.

# Criar tabela cruzada entre estágio do câncer e tratamento recebido
crosstab = pd.crosstab(df["Stage_at_Diagnosis"], df["Chemotherapy_Received"])

# Formatação da tabela cruzada para melhor legibilidade e adição de totais
crosstab['Total'] = crosstab.sum(axis=1)  # Adiciona total por estágio
crosstab.loc['Total'] = crosstab.sum(axis=0)  # Adiciona total por quimioterapia

# Teste Qui-quadrado para ver se há associação entre estágio do câncer e quimioterapia
chi2, p, _, _ = chi2_contingency(crosstab.iloc[:-1, :-1])  # Exclui totais do teste

# Gráfico de barras para tratamentos recebidos por estágio do câncer
plt.figure(figsize=(10, 8))  # Aumenta o tamanho da figura para melhor espaçamento
ax = sns.countplot(data=df, x="Stage_at_Diagnosis", hue="Chemotherapy_Received", palette="Set1")
plt.title("Quimioterapia Recebida por Estágio do Câncer", fontsize=14, pad=20)  # Aumenta o espaçamento do título
plt.xlabel("Estágio do Diagnóstico", fontsize=12)
plt.ylabel("Número de Pacientes", fontsize=12)
plt.legend(title="Quimioterapia")
plt.xticks(ticks=[0, 1, 2, 3], labels=["I", "II", "III", "IV"], rotation=0)

# Adicionar valores de Stage_at_Diagnosis em cima de cada coluna (como números inteiros)
for p in ax.patches:
    ax.annotate(f'{int(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center', xytext=(0, 10), textcoords='offset points')

# Adicionar caixa de texto com valores possíveis para Stage_at_Diagnosis
valores_possiveis_estagio = (
    "Valores Possíveis para Estágio do Diagnóstico:\n"
    "I: Tumor localizado, sem disseminação\n"
    "II: Tumor invade tecidos próximos\n"
    "III: Tumor com envolvimento significativo dos linfonodos\n"
    "IV: Câncer metastático (espalhado para órgãos distantes)"
)
plt.figtext(0.01, -0.28, valores_possiveis_estagio, ha="left", fontsize=10, bbox={"facecolor": "lightgray", "alpha": 0.5, "pad": 5})

# Adicionar caixa de texto com valores possíveis para Quimioterapia_Received
valores_possiveis_quimioterapia = (
    "Valores Possíveis para tratamento com quimioterapia:\n"
    "0: Paciente não realizou quimioterapia\n"
    "1: Paciente realizou quimioterapia"
)
plt.figtext(0.01, -0.45, valores_possiveis_quimioterapia, ha="left", fontsize=10, bbox={"facecolor": "lightgray", "alpha": 0.5, "pad": 5})

plt.tight_layout(rect=[0, 0.03, 1, 0.75])  # Ajusta o layout para evitar sobreposição

plt.show()

# Texto explicativo
texto18 = (
    "O gráfico de barras acima exibe a relação entre o estágio do câncer no diagnóstico e o recebimento de quimioterapia pelos pacientes. "
    "Observa-se que a frequência de pacientes que receberam quimioterapia (1) é ligeiramente superior à frequência de pacientes que não receberam (0) em todos os estágios do câncer. "
    "O teste Qui-quadrado, que avalia a associação entre as duas variáveis, resultou em um valor de X² de 2.74 e um p-valor de 0.4338. "
    "Como o p-valor é superior a 0.05, não há evidência estatística suficiente para rejeitar a hipótese nula de que não há associação entre o estágio do câncer e o recebimento de quimioterapia. "
    "Isso sugere que a decisão de administrar quimioterapia não é significativamente influenciada pelo estágio do câncer no diagnóstico, "
    "podendo ser determinada por outros fatores clínicos ou individuais do paciente. "
    "A análise da relação entre o estágio do câncer e o tratamento recebido pode auxiliar na compreensão dos protocolos de tratamento adotados e no planejamento de estratégias de intervenção."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto18, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)

# Pergunta: Considerando os atributos relacionados ao diagnóstico e tratamento, existe uma relação com o fato de o paciente ter se submetido ao exame de colonoscopia?
# Não respondeu a pergunta

# Certifique-se de que há uma coluna indicando se o paciente fez colonoscopia
if "Colonoscopy_Access" in df.columns:
    # Tabela cruzada entre colonoscopia e estágio do câncer
    colonoscopia_crosstab = pd.crosstab(df["Stage_at_Diagnosis"], df["Colonoscopy_Access"])

    # Teste Qui-quadrado
    chi2, p, _, _ = chi2_contingency(colonoscopia_crosstab)

    # Gráfico de barras
    plt.figure(figsize=(10, 8))  # Aumenta o tamanho da figura para melhor espaçamento
    ax = sns.countplot(data=df, x="Stage_at_Diagnosis", hue="Colonoscopy_Access", palette="Set1")
    plt.title("Colonoscopia realizada por estágio do câncer", fontsize=14, pad=20)  # Aumenta o espaçamento do título
    plt.xlabel("Estágio do Diagnóstico", fontsize=12)
    plt.ylabel("Número de Pacientes", fontsize=12)
    plt.legend(title="Colonoscopia")
    plt.xticks(ticks=[0, 1, 2, 3], labels=["I", "II", "III", "IV"], rotation=0)

    # Adicionar valores de Stage_at_Diagnosis em cima de cada coluna (como números inteiros)
    for p in ax.patches:
        ax.annotate(f'{int(p.get_height())}', (p.get_x() + p.get_width() / 2., p.get_height()),
                    ha='center', va='center', xytext=(0, 10), textcoords='offset points')

    # Adicionar caixa de texto com valores possíveis para Stage_at_Diagnosis
    valores_possiveis_estagio = (
        "Valores Possíveis para Estágio do Diagnóstico:\n"
        "I: Tumor localizado, sem disseminação\n"
        "II: Tumor invade tecidos próximos\n"
        "III: Tumor com envolvimento significativo dos linfonodos\n"
        "IV: Câncer metastático (espalhado para órgãos distantes)"
    )
    plt.figtext(0.01, -0.28, valores_possiveis_estagio, ha="left", fontsize=10, bbox={"facecolor": "lightgray", "alpha": 0.5, "pad": 5})

    # Adicionar caixa de texto com valores possíveis para Colonoscopy_Access
    valores_possiveis_colonoscopia = (
        "Valores Possíveis para Colonoscopia:\n"
        "Vermelho ou 0: Paciente não realizou colonoscopia\n"
        "Azul ou 1: Paciente realizou colonoscopia"
    )
    plt.figtext(0.01, -0.45, valores_possiveis_colonoscopia, ha="left", fontsize=10, bbox={"facecolor": "lightgray", "alpha": 0.5, "pad": 5})

    plt.tight_layout(rect=[0, 0.03, 1, 0.75])  # Ajusta o layout para evitar sobreposição

    plt.show()

    # Texto explicativo
    texto19 = (
        "O gráfico de barras acima exibe a relação entre o estágio do câncer no diagnóstico e a realização de colonoscopia pelos pacientes. "
        "Observa-se que a frequência de pacientes que realizaram colonoscopia (1) é consideravelmente superior à frequência de pacientes que não realizaram (0) em todos os estágios do câncer. "
        "O teste Qui-quadrado, que avalia a associação entre as duas variáveis, resultou em um valor de X² de 1.90 e um p-valor de 0.5944. "
        "Como o p-valor é superior a 0.05, não há evidência estatística suficiente para rejeitar a hipótese nula de que não há associação entre o estágio do câncer e a realização de colonoscopia. "
        "Isso sugere que a decisão de realizar colonoscopia não é significativamente influenciada pelo estágio do câncer no diagnóstico, "
        "podendo ser determinada por outros fatores clínicos ou individuais do paciente. "
        "A análise da relação entre o estágio do câncer e a realização de colonoscopia pode auxiliar na compreensão dos protocolos de rastreamento adotados e no planejamento de estratégias de intervenção."
    )

    # Justificação do texto
    largura = 80  # Ajuste conforme necessário
    texto_justificado = textwrap.fill(texto19, width=largura)

    # Impressão do texto justificado
    print("\nExplicação dos Resultados:\n")
    print(texto_justificado)
else:
    print("⚠️ A coluna 'Colonoscopy_Access' não está no dataset. Verifique os dados disponíveis!")


import pandas as pd
import scipy.stats as stats

# Pergunta 1: Considerando os atributos relacionados ao diagnóstico e tratamento, existe uma relação com o fato de o paciente ter se submetido ao exame de colonoscopia?
# Teste Qui-Quadrado para Relação entre Fatores e Tratamento só com variáveis categóricas, por isso carreguei de novo o excel

# Defina o caminho correto para o arquivo no Google Colab
file_path = "c:/Users/gina_/OneDrive/Área de Trabalho/PUC/AULAS 7 SEMESTRE/Projeto/colorectal_cancer_prediction.xlsx"

# Carregar o dataset diretamente usando pandas
df = pd.read_excel(file_path, dtype=str)

# Definir variáveis categóricas a serem testadas
categorical_vars = ["Stage_at_Diagnosis", "Tumor_Aggressiveness", "Insurance_Coverage",
                    "Time_to_Diagnosis", "Treatment_Access", "Chemotherapy_Received", "Radiotherapy_Received"]

# Aplicar o teste qui-quadrado
for var in categorical_vars:
    table = pd.crosstab(df["Colonoscopy_Access"], df[var])
    chi2, p, dof, expected = stats.chi2_contingency(table)
    
    print(f"\nVariável: {var}")
    print(f"Qui-Quadrado: {chi2:.4f}, p-valor: {p:.4f}")
    if p < 0.05:
        print("➡ Associação significativa! 🔥")
    else:
        print("❌ Nenhuma associação estatística.")

# Texto explicativo
texto20 = (
    "Com base nos resultados do teste Qui-Quadrado realizado, não foi encontrada nenhuma associação estatisticamente significativa entre as variáveis de diagnóstico "
    "e tratamento analisadas (estágio do diagnóstico, agressividade do tumor, cobertura do seguro, tempo para o diagnóstico, acesso ao tratamento, quimioterapia recebida"
    " e radioterapia recebida) e o acesso à colonoscopia. Isso significa que, dentro dos dados analisados, não há evidências de que esses fatores influenciem a "
    "realização do exame de colonoscopia. É importante ressaltar que o teste Qui-Quadrado é adequado para analisar a relação entre variáveis categóricas, e a ausência "
    "de significância estatística não descarta a possibilidade de outras influências não consideradas na análise."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto20, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)




# Pergunta 2: Pergunta: Considerando os atributos relacionados às informações demográficas e ao diagnóstico e tratamento, qual o tratamento é mais recomendável?
# Teste Qui-Quadrado para Relação entre Fatores e Tratamento só com variáveis categóricas, por isso carreguei de novo o excel

import scipy.stats as stats

# Defina o caminho correto para o arquivo no Google Colab
file_path = "c:/Users/gina_/OneDrive/Área de Trabalho/PUC/AULAS 7 SEMESTRE/Projeto/colorectal_cancer_prediction.xlsx"

# Carregar o dataset diretamente usando pandas
df = pd.read_excel(file_path, dtype=str)

# Lista de variáveis categóricas relevantes
categorical_vars = [
    "Gender", "Race", "Region", "Urban_or_Rural", "Socioeconomic_Status",
    "Family_History", "Previous_Cancer_History", "Stage_at_Diagnosis",
    "Tumor_Aggressiveness", "Insurance_Coverage", "Time_to_Diagnosis",
    "Treatment_Access"
]

# Analisando relação das variáveis com os tratamentos recomendados
treatments = ["Chemotherapy_Received", "Radiotherapy_Received"]

for treatment in treatments:
    print(f"\n===== Analisando {treatment} =====")
    
    for var in categorical_vars:
        table = pd.crosstab(df[treatment], df[var])
        chi2, p, dof, expected = stats.chi2_contingency(table)
        
        print(f"\nVariável: {var}")
        print(f"Qui-Quadrado: {chi2:.4f}, p-valor: {p:.4f}")
        if p < 0.05:
            print("➡ Associação significativa! 🔥")
        else:
            print("❌ Nenhuma associação estatística.")

            # Texto explicativo
texto21 = (
    "Os resultados do teste Qui-Quadrado indicam que, ao analisar a influência de fatores demográficos e de diagnóstico/tratamento na recomendação de quimioterapia, "
    "nenhuma das variáveis testadas mostrou associação estatisticamente significativa. No entanto, ao analisar a recomendação de radioterapia, a agressividade do "
    "tumor apresentou uma associação significativa, sugerindo que este fator pode influenciar a decisão de recomendar radioterapia. As demais variáveis não mostraram "
    "relação estatística com a radioterapia. Assim, a agressividade do tumor parece ser um fator relevante na decisão de recomendar radioterapia, enquanto as outras"
    " variáveis analisadas não demonstraram influência significativa em nenhum dos tratamentos. É importante notar que a ausência de significância estatística não "
    "descarta a possibilidade de relações complexas e que outros fatores não considerados na análise podem influenciar as decisões de tratamento."
)

# Justificação do texto
largura = 80  # Ajuste conforme necessário
texto_justificado = textwrap.fill(texto21, width=largura)

# Impressão do texto justificado
print("\nExplicação dos Resultados:\n")
print(texto_justificado)